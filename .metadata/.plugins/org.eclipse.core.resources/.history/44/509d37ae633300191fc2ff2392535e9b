package com.bridgelabz.fundoonotes.controller;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.bridgelabz.fundoonotes.model.User;
import com.bridgelabz.fundoonotes.service.UserService;

@RestController
@RequestMapping("/user")
public class UserController {

	@Autowired
	private UserService userService;

	@PostMapping(value = "/registeruser")
	public ResponseEntity<?> registerUser(@RequestBody User user, HttpServletRequest request) {
		if (userService.registerUser(user, request) != null)
			return new ResponseEntity<String>("successfully registered", HttpStatus.OK);
		else
			return new ResponseEntity<Void>(HttpStatus.CONFLICT);

	}

	@PostMapping(value = "/loginuser")
	public ResponseEntity<?> loginUser(@RequestBody User user, HttpServletRequest request,
			HttpServletResponse response) {

		User newUser = userService.loginUser(user, request, response);
		if (newUser != null) {
			return new ResponseEntity<String>("succesfully logged in", HttpStatus.FOUND);
		} else {
			return new ResponseEntity<String>("Incorrect emailId or password", HttpStatus.NOT_FOUND);
		}
	}

	@GetMapping(value = "/activationstatus/{token:.+}")
	public ResponseEntity<?> activeUser(@PathVariable("token") String token, HttpServletRequest request) {

		if (userService.activateUser(token, request) != null) {
			return new ResponseEntity<String>("Activated", HttpStatus.FOUND);
		} else {
			return new ResponseEntity<String>("Email incorrect. Please enter valid email address present in database",
					HttpStatus.NOT_FOUND);
		}
	}

	@PutMapping(value = "/updateuser")
	public ResponseEntity<?> updateUser(@RequestHeader("token") String token, @RequestBody User user,
			HttpServletRequest request) {

		User newUser = userService.updateUser(token, user, request);
		if (newUser != null) {
			return new ResponseEntity<User>(newUser, HttpStatus.FOUND);
		} else {
			return new ResponseEntity<String>("Email incorrect. Please enter valid email address present in database",
					HttpStatus.NOT_FOUND);
		}
	}
//
//	@DeleteMapping(value = "/deleteuser")
//	public ResponseEntity<?> deleteUser(@RequestHeader("token") String token, HttpServletRequest request) {
//
//		User user = userService.deleteUser(token, request);
//		if (user != null) {
//			return new ResponseEntity<User>(user, HttpStatus.FOUND);
//		} else {
//			return new ResponseEntity<String>("Email incorrect. Please enter valid email address present in database",
//					HttpStatus.NOT_FOUND);
//		}
//	}

}
